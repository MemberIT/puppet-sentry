#
# This script checks to see if a project exists for the given
# app_env/team.
#
import os, sys, site
from optparse import OptionParser

site.addsitedir('<%= @path %>')
os.environ['SENTRY_CONF'] = '<%= @path %>/sentry.conf'

from sentry.utils.runner import configure
configure()

# Add in the sentry object models
from sentry.models import Organization, Project, ProjectKey, Team, User

def build_parser():
    parser = OptionParser()
    parser.add_option("-p", "--project", dest="project", help="Application/Project name.", type="string")
    parser.add_option("-l", "--platform", dest="platform", help="Application Language/Platform.", type="string")
    parser.add_option("-o", "--org", dest="org", help="Organization to own this project (<%= @organization %>)", type="string", default="<%= @organization %>")
    parser.add_option("-t", "--team", dest="team", help="Team to own this project (<%= @team %>)", type="string", default="<%= @team %>")
    parser.add_option("-v", "--verbose", dest="verbose", help="Verbose output", action="store_true")
    return parser

def main():
  parser = build_parser()
  options, _args = parser.parse_args()
  if not options.project:
    parser.error("Project name required")
  if not options.platform:
    parser.error("Platform is required")

  e = False
  try:  
    o = Organization.objects.get(name=options.org)
    t = Team.objects.get(name=options.team)
  except:
    e = sys.exc_info()[0]

  if e:
    print "Error loading Sentry environment: %s" % (e)
    sys.exit(1)

  try:
    p = Project.objects.get(name=options.project)
  except:
    p = False

  if p:
    if options.verbose:
      print 'Project exists: %s' % (options.project)
    sys.exit(1)

  # the project doesn't exist.  Create it!
  p = Project()
  # ensure all project names are in lowercase
  p.name = options.project.lower()
  p.team_id = t.id
  p.organization_id = o.id
  p.platform = options.platform
  try:
    p.save()
  except:
    e = sys.exc_info()[0]

  if e:
    # an error occured
    if options.verbose:
      print "Project save failed for %s: %s" % (options.project, e)
    sys.exit(1)

  # create a static file containing this application's DSN
  k = ProjectKey.objects.get(project_id=p.id).get_dsn()
  dsn = open('<%= @path %>/dsn/' + p.name, 'a')
  dsn.write(k)
  dsn.close()

  if options.verbose:
    print "Project %s created." % (options.project)

if __name__ == "__main__":
  main()
